# NOTE(jaredponn):
# Loosely, the key idea is that in this flake we want to have an attribute like
# ```
# lib.<system> = {
#   haskellFlake = ...
#   rustFlake = ...
#   typescriptFlake = ...
#   ...
# };
# flakeModules = {
#   rustMonorepoPreCommit = ...
# };
# ```
# This is unfortunately not super easy to do with flake-parts! Some useful
# links + examples are as follows.
# - [1] https://github.com/hercules-ci/flake-parts/blob/main/lib.nix
# - [2] https://github.com/hercules-ci/flake-parts/pull/63/files
# - [3] https://github.com/hercules-ci/flake-parts/blob/main/modules/formatter.nix
{
  config,
  inputs,
  flake-parts-lib,
  lib,
  withSystem,
  ...
}:
{
  options = {
    flake = flake-parts-lib.mkSubmoduleOptions {
      # Expose attributes which are generated by the `perSystem` `lib` options
      # e.g. it gives an option for things like
      # ```
      # lib.<system>.haskellFlake = ..
      # ```
      lib = lib.mkOption {
        type = lib.types.lazyAttrsOf (lib.types.lazyAttrsOf (lib.types.functionTo lib.types.attrs));
        default = { };
        visible = false;
      };

      # Expose attributes like
      # ```
      # flakeModules.rustMonorepoPreCommit = ..
      # ```
      flakeModules = {
        rustMonorepoPreCommit = lib.mkOption {
          type = lib.types.deferredModule;
          default = flake-parts-lib.importApply ./pre-commit-hooks/rust-monorepo.nix { inherit withSystem; };
          readOnly = true;
          description = ''pre-commit-hooks.nix hook for Rust in a monorepo setting'';
          example = ''TODO(bladyjoker)'';
        };

      };
    };
    perSystem = flake-parts-lib.mkPerSystemOption (
      {
        pkgs,
        pkgsForCtl,
        pkgsForHaskellNix,
        pkgsForRust,
        ...
      }:
      {
        options = {
          lib = {
            purescriptFlake = lib.mkOption {
              type = lib.types.functionTo lib.types.attrs;
              default = import ./flake-purescript.nix pkgsForCtl;
              readOnly = true;
              description = ''
                TODO(jaredponn): write down documentation here
              '';
              example = ''
                TODO(jaredponn): write down an example here
              '';
            };

            rustFlake = lib.mkOption {
              type = lib.types.functionTo lib.types.attrs;
              default = import ./rust/flake-rust.nix inputs.crane pkgsForRust;
              readOnly = true;
              description = builtins.readFile ./rust/description.md;
              example = builtins.readFile ../examples/rust-flake-project/build.nix;
            };

            haskellData = lib.mkOption {
              type = lib.types.functionTo lib.types.attrs;
              default = import ./haskell-data.nix pkgs;
              readOnly = true;
              description = ''Makes a derivation containing a Haskell Cabal package with data modules (using Cabal data stanzas)'';
              example = ''
                ```haskell
                  haskellData {
                    srcs = [ ./. ];
                    cabalDataPatterns = [ "**/*.json" ];
                    cabalPackageName = "golden-json-data";
                  };
                ```
              '';
            };

            haskellFlake = lib.mkOption {
              type = lib.types.functionTo lib.types.attrs;
              default = import ./flake-haskell.nix pkgsForHaskellNix;
              readOnly = true;
              description = ''
                TODO(jaredponn): write down documentation here
              '';
              example = ''
                TODO(jaredponn): write down an example here
              '';
            };

            haskellPlutusFlake = lib.mkOption {
              type = lib.types.functionTo lib.types.attrs;
              default = import ./flake-haskell-plutus.nix inputs.cardano-haskell-packages pkgsForHaskellNix;
              readOnly = true;
              description = ''
                TODO(jaredponn): write down documentation here
              '';
              example = ''
                TODO(jaredponn): write down an example here
              '';
            };

            typescriptFlake = lib.mkOption {
              type = lib.types.functionTo lib.types.attrs;
              default = import ./typescript/flake-typescript.nix pkgs;
              readOnly = true;
              description = builtins.readFile ./typescript/description.md;
              example = ''TODO(jaredponn)'';
            };

          };
        };
      }
    );
  };

  config = {
    # TODO(jaredponn): not sure why the new fancy `transposition` submodule
    # doesn't set the `perInput` correctly? So, when consuming this module, we
    # can't do something like
    # ```
    # inputs'.flake-lang.lib.haskellFlake { ... }
    # ```
    # and instead must do
    # ```
    # inputs.flake-lang.lib.${system}.haskellFlake { ... }
    # ```
    transposition.lib = { };
  };
}
